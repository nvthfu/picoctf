import jwt
from datetime import datetime, timedelta

class JwtService:
    SECRET_KEY = "1234"
    CLAIM_KEY_USER_ID = "userId"
    CLAIM_KEY_EMAIL = "email"
    CLAIM_KEY_ROLE = "role"
    ISSUER = "bookshelf"

    def create_token(self, user_id, email, role):
        expiration = datetime.utcnow() + timedelta(days=7)

        payload = {
            "iss": self.ISSUER,
            "iat": datetime.utcnow(),
            "exp": expiration,
            self.CLAIM_KEY_USER_ID: user_id,
            self.CLAIM_KEY_EMAIL: email,
            self.CLAIM_KEY_ROLE: role
        }

        token = jwt.encode(payload, self.SECRET_KEY, algorithm="HS256")
        return token

    def decode_token(self, token):
        payload = jwt.decode(token, self.SECRET_KEY, algorithms=["HS256"], issuer=self.ISSUER)
        
        user_id = payload[self.CLAIM_KEY_USER_ID]
        email = payload[self.CLAIM_KEY_EMAIL]
        role = payload[self.CLAIM_KEY_ROLE]

        return {"user_id": user_id, "email": email, "role": role}

jwt_service = JwtService()

token = jwt_service.create_token(2, "admin", "Admin")
print("Token:", token)

decoded_token = jwt_service.decode_token(token)
print("Decoded Token:", decoded_token)